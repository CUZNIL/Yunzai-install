import json
from pathlib import Path
from typing import List

import toml
from pydantic import BaseModel, Extra

from .dirs import get_config_file

config_file_path = get_config_file("config.toml")


class MemeConfig(BaseModel):
    load_builtin_memes: bool = True  # 是否加载内置表情包
    meme_dirs: List[Path] = []  # 加载其他位置的表情包，填写文件夹路径
    meme_disabled_list: List[str] = []  # 禁用的表情包列表，填写表情的 `key`


class ResourceConfig(BaseModel):
    resource_url: str = (
        "https://ghproxy.com/https://raw.githubusercontent.com/MeetWq/meme-generator"
    )


class GifConfig(BaseModel):
    gif_max_size: float = 10  # 限制生成的 gif 文件大小，单位为 Mb
    gif_max_frames: int = 300  # 限制生成的 gif 文件帧数


class TranslatorConfig(BaseModel):
    baidu_trans_appid: str = ""  # 百度翻译api相关，表情包 `dianzhongdian` 需要使用`dianzhongdian` 需要使用
    baidu_trans_apikey: str = ""  # 可在 百度翻译开放平台 (http://api.fanyi.baidu.com) 申请


class ServerConfig(BaseModel):
    host: str = "127.0.0.1"
    port: int = 2233


class Config(BaseModel, extra=Extra.ignore):
    meme: MemeConfig = MemeConfig()
    resource: ResourceConfig = ResourceConfig()
    gif: GifConfig = GifConfig()
    translate: TranslatorConfig = TranslatorConfig()
    server: ServerConfig = ServerConfig()

    @classmethod
    def load(cls) -> "Config":
        return cls.parse_obj(toml.load(config_file_path))

    def dump(self):
        with open(config_file_path, "w", encoding="utf8") as f:
            toml.dump(json.loads(self.json()), f)


if not config_file_path.exists():
    meme_config = Config()
else:
    meme_config = Config.load()
